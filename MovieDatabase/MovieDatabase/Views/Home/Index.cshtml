@model List<MovieDatabase.Models.Movie>
@{
    ViewBag.Title = "Home";
}

@section css {
    <style type="text/css">
        tr.filter>th,tr.filter>th>.float-right {
            padding-right: 10px;
        }
        .float-right {
            float: right;
        }
        .float-left{
            float: left;
        }
        input[data-watermark] {
            border-radius: 6px;
        }
        .watermark-empty {
            color: #A0A0A0;
        }
        table,h1,h4 {
            display: inline-block;
        }
        .sort-header:hover {
            cursor: pointer;
        }
        .table-scroll {
            overflow: auto;
            max-height: 100px;
            width: 100px;
        }
    </style>
}

<div class="page-header">
    <h1>My Movies</h1>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<h4><b>@Html.ActionLink("Add Movie", "Index", "Movie")</b></h4><h4>&nbsp;|&nbsp;<b>@Html.ActionLink("Add Actor", "Index", new { controller = "Actor" })</b></h4><h4>&nbsp;|&nbsp;<b>@Html.ActionLink("Add Genre", "Index", new { controller = "Genre" })</b></h4><h4>&nbsp;|&nbsp;<b>@Html.ActionLink("Stats", "Index", new { controller = "Statistics" })</b></h4>
</div>

<table id="MovieList" border="1">
    <tr class="filter">
        <th>@Html.TextBox("FilterName", null, new { column_filter = "true", data_watermark = "true", data_watermark_text = "Filter..." })</th>
        <th>@Html.TextBox("FilterGenre", null, new { column_filter = "true", data_watermark = "true", data_watermark_text = "Filter..." })</th>
        <th>@Html.TextBox("FilterYear", null, new { column_filter = "true", data_watermark = "true", data_watermark_text = "Filter..." })</th>
        <th>@Html.TextBox("FilterActor", null, new { column_filter_actor = "true", data_watermark = "true", data_watermark_text = "Filter..." })</th>
    </tr>
    <tr class="header">
        <th class="sort-header">Name&nbsp;<span class="sortArrow"></span></th>
        <th class="sort-header">Genre&nbsp;<span class="sortArrow"></span></th>
        <th class="sort-header">Year&nbsp;<span class="sortArrow"></span></th>
        <th>Actors</th>
    </tr>
    @foreach (var movie in Model)
    {
        <tr>
            <td>@Html.ActionLink(movie.Title, "Index", new { controller = "Movie", id = movie.ID })</td>
            <td>@Html.ActionLink(movie.Genre.Name, "Index", new { controller = "Genre", id = movie.Genre.ID })</td>
            <td>@movie.Year</td>
            <td>
                <table class="actor-list table-scroll">
                    @foreach(var actor in movie.Actors.OrderBy(c => c.LastName))
                    {
                        <tr>
                            <td>@Html.ActionLink(actor.FirstName + " " + actor.LastName, "Index", new { controller = "Actor", id = actor.ID })</td>
                        </tr>
                    }
                </table>
            </td>
        </tr>
    }
</table>


@section scripts {
    <script type="text/javascript">
        $(window).load(function () {
            String.prototype.contains = function (str) {
                return this.indexOf(str) >= 0;
            }

            // Get any text input. Otherwise return an empty string
            $.prototype.getWatermarkInputText = function () {
                if ($(this).hasClass("watermark-empty")) {
                    return "";
                }

                return $(this).val();
            }

            // If the next child is a hyperlink, return its innerHTML. Otherwise return the parent's innerHTML
            $.prototype.htmlOrLinkText = function () {
                if ($(this).children("a").length > 0) {
                    return $(this).find("a").html();
                }

                return $(this).html();
            }

            $("[data-watermark]").each(function () {
                // Initialize watermark inputs

                // Text is empty by default
                $(this).addClass("watermark-empty");

                // Show watermark text
                $(this).val($(this).data("watermark-text"));

                $(this).focus(function () {
                    // Remove the empty class for input
                    $(this).removeClass("watermark-empty");

                    // If no input previously entered, clear watermark text
                    if ($(this).data("watermark-input") === undefined
                        || $(this).data("watermark-input") == '') {
                        $(this).val("");
                    }
                });

                $(this).blur(function () {
                    // Set the input attribute to keep track of what was entered
                    $(this).data("watermark-input", $(this).val())
                           .attr("data-watermark-input", $(this).val());

                    // If input entered, set input attributes. No change in class
                    if ($(this).val() == '' || $(this).val() == null) {
                        // Add watermark-empty class
                        $(this).addClass("watermark-empty");

                        // Set val to watermark text
                        $(this).val($(this).data("watermark-text"));
                    }
                });
            });

            $("#MovieList [data-watermark][column-filter],#MovieList [data-watermark][column-filter-actor]").each(function () {
                var index = $(this).parent().index();
                var rows = $(this).parent().parent().nextAll(":not(.header)");
                
                $(this).keyup(function () {
                    rows.each(function () {
                        var row = $(this);
                        var rowVisible = true;

                        $("#MovieList [data-watermark][column-filter],#MovieList [data-watermark][column-filter-actor]").each(function () {
                            var enteredText = $(this).not(".watermark-empty").val();
                            if (enteredText === undefined || enteredText === null) {
                                enteredText = "";
                            }
                            enteredText = enteredText.toLowerCase();

                            var cellText;
                            
                            if ($(this).attr("column-filter-actor")) {
                                cellText = row.find("td:eq(" + $(this).parent().index() + ")").find("table.actor-list td a").map(function () { return this.innerHTML; }).get().join(" ").toLowerCase();
                            }
                            else {
                                cellText = row.find("td:eq(" + $(this).parent().index() + ")").htmlOrLinkText().toLowerCase();
                            }

                            rowVisible = rowVisible && (cellText.contains(enteredText) || enteredText == "");
                        });

                        row.toggle(rowVisible);
                    });
                });
            });

            $("#MovieList").find("tr.header>th.sort-header").click(function () {
                var index = $(this).index();
                var rows = $(this).parent().nextAll(":not(.header)").get();
                var sortToggle = 1;

                // Remove sort settings on all other columns
                $(this).siblings().removeAttr("data-sort")
                                  .find("span.sortArrow").html("");

                // Set sort order for the selected column
                if ($(this).attr("data-sort") != "asc") {
                    $(this).attr("data-sort", "asc");
                    $(this).find("span.sortArrow").html("&#x21E7;"); // Up Arrow
                    sortToggle = 1;
                }
                else {
                    $(this).attr("data-sort", "desc");
                    $(this).find("span.sortArrow").html("&#x21D3;"); // Down Arrow
                    sortToggle = -1;
                }

                // Sort the DOM elements by inner html (or link text if it's a link)
                rows.sort(function (a, b) {
                    var A = $(a).find("td").eq(index).htmlOrLinkText().toLowerCase();
                    var B = $(b).find("td").eq(index).htmlOrLinkText().toLowerCase();

                    if (A < B) {
                        return -1 * sortToggle;
                    }

                    if (A > B) {
                        return sortToggle;
                    }

                    return 0;
                });

                // Remove rows
                $("#MovieList").find("tr.header").nextAll().remove();

                // Add the rows back in, sorted
                $.each(rows, function (index, row) {
                    $('#MovieList').children("tbody").append(row);
                });
            });
        });
    </script>
}